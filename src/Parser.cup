 
import java_cup.runtime.*;

parser code {:
    
    public boolean syntaxErrors = false;
    
    public void syntax_error(Symbol current_token) {
        report_error(
            "Syntax error at line " + (current_token.left+1) + ", column "
            + current_token.right + "\n", null
        );
        syntaxErrors = true;
    }
:}

terminal LOOP, POOL, IF, THEN, ELSE, FI, BREAK, FDEF, TDEF, IN, ALIAS, READ, PRINT, MAIN, CHAR_TYPE, BOOL_TYPE, INT_TYPE, RAT_TYPE, FLOAT_TYPE, DICT_TYPE, SEQ_TYPE, TOP_TYPE, NULL, NOT, AND, OR, IMPLICATION, ADD, MINUS, TIMES, DIVIDE, POWER, LESSTHAN, LESSTHANEQUAL, EQUAL, NOTEQUAL, ASSIGN, LPARENS, RPARENS, COLON, LBRACKET, RBRACKET, SEMICOLON, GREATERTHAN, COMMA, QUESTION, CONCAT, LBRACE, RBRACE, RETURN, DOT, TRUE, FALSE;
terminal Character CHAR;
terminal Integer INT;
terminal String RAT;
terminal Double FLOAT;
terminal String STRING;
terminal String IDENTIFIER;

non terminal program, main, stmtlist, glbl_stmtlist, lcl_stmt, glbl_stmt, exprlist, expr, slice, dictlist, decllist, decl, type, loop, loop_stmt, fdef, decl_stmt, decl_stmtlist;

precedence nonassoc ELSE;
precedence left IN;
precedence right CONCAT;
precedence left AND, OR, IMPLICATION;
precedence left LESSTHAN, LESSTHANEQUAL, EQUAL, NOTEQUAL;
precedence left ADD, MINUS;
precedence left TIMES, DIVIDE;
precedence left POWER;
precedence right NOT;
precedence left LPARENS, RPARENS, LBRACKET, RBRACKET;
precedence left DOT, QUESTION;

start with program;

program ::= main:m glbl_stmtlist:s
    | glbl_stmtlist:s1 main:m glbl_stmtlist:s2
    | glbl_stmtlist:s main:m
    | main:m
    ;
main ::= MAIN LBRACE fdef:s RBRACE SEMICOLON
    ;
stmtlist ::= lcl_stmt:s
    | stmtlist:s1 lcl_stmt:s2
    ;
glbl_stmtlist ::= glbl_stmt:s
    | glbl_stmtlist:s1 glbl_stmt:s2
    ;
decl_stmt ::= IDENTIFIER:identifier COLON type:t SEMICOLON
    | IDENTIFIER:identifier COLON type:t ASSIGN exprlist:e SEMICOLON
    | TDEF IDENTIFIER:t LBRACE decllist:d RBRACE SEMICOLON
    | TDEF IDENTIFIER:t LBRACE RBRACE SEMICOLON
    | FDEF IDENTIFIER:identifier LPARENS decllist:p RPARENS LBRACE fdef:s RBRACE SEMICOLON
    | FDEF IDENTIFIER:identifier LPARENS decllist:p RPARENS LBRACE fdef:s RBRACE COLON type:t SEMICOLON
    | FDEF IDENTIFIER:identifier LPARENS RPARENS LBRACE fdef:s RBRACE SEMICOLON
    | FDEF IDENTIFIER:identifier LPARENS RPARENS LBRACE fdef:s RBRACE COLON type:t SEMICOLON
    | ALIAS type:t1 IDENTIFIER:t2 SEMICOLON
    | FDEF IDENTIFIER:identifier LPARENS decllist:p RPARENS LBRACE RBRACE SEMICOLON
    | FDEF IDENTIFIER:identifier LPARENS RPARENS LBRACE RBRACE SEMICOLON
    ;
decl_stmtlist ::= decl_stmt:d
    | decl_stmtlist:d1 decl_stmt:d2
    ;
fdef ::= decl_stmtlist:d stmtlist:s
    | stmtlist:s
    ;
glbl_stmt ::= IDENTIFIER:identifier COLON type:t SEMICOLON
    | IDENTIFIER:identifier COLON type:t ASSIGN exprlist:e SEMICOLON
    | TDEF IDENTIFIER:t LBRACE decllist:d RBRACE SEMICOLON
    | TDEF IDENTIFIER:t LBRACE RBRACE SEMICOLON
    | FDEF IDENTIFIER:identifier LPARENS decllist:p RPARENS LBRACE fdef:s RBRACE SEMICOLON
    | FDEF IDENTIFIER:identifier LPARENS decllist:p RPARENS LBRACE fdef:s RBRACE COLON type:t SEMICOLON
    | FDEF IDENTIFIER:identifier LPARENS RPARENS LBRACE fdef:s RBRACE SEMICOLON
    | FDEF IDENTIFIER:identifier LPARENS RPARENS LBRACE fdef:s RBRACE COLON type:t SEMICOLON
    | FDEF IDENTIFIER:identifier LPARENS decllist:p RPARENS LBRACE RBRACE SEMICOLON
    | FDEF IDENTIFIER:identifier LPARENS RPARENS LBRACE RBRACE SEMICOLON
    ;
lcl_stmt ::= IDENTIFIER:identifier ASSIGN exprlist:e SEMICOLON
    | IDENTIFIER:i1 DOT IDENTIFIER:i2 ASSIGN exprlist:e SEMICOLON
    | READ IDENTIFIER:identifier SEMICOLON
    | PRINT expr:e SEMICOLON
    | IF LPARENS expr:e RPARENS THEN stmtlist:s FI
    | IF LPARENS expr:e RPARENS THEN stmtlist:s1 ELSE stmtlist:s2 FI
    | LOOP loop:l POOL
    | RETURN expr:e SEMICOLON
    | RETURN SEMICOLON
    | QUESTION expr:e1 QUESTION IDENTIFIER:function LPARENS exprlist:e2 RPARENS SEMICOLON
    | QUESTION expr:e1 QUESTION IDENTIFIER:function LPARENS RPARENS SEMICOLON
    ;
loop ::= loop_stmt:l
    | loop:l1 loop_stmt:l2
    ;
loop_stmt ::= IDENTIFIER:identifier ASSIGN exprlist:e SEMICOLON
    | IDENTIFIER:i1 DOT IDENTIFIER:i2 ASSIGN exprlist:e SEMICOLON
    | READ IDENTIFIER:identifier SEMICOLON
    | PRINT expr:e SEMICOLON
    | IF LPARENS expr:e RPARENS THEN loop:s FI
    | IF LPARENS expr:e RPARENS THEN loop:s1 ELSE loop:s2 FI
    | LOOP loop:l POOL
    | RETURN expr:e SEMICOLON
    | RETURN SEMICOLON
    | QUESTION expr:e1 QUESTION IDENTIFIER:function LPARENS exprlist:e2 RPARENS SEMICOLON
    | QUESTION expr:e1 QUESTION IDENTIFIER:function LPARENS RPARENS SEMICOLON
    | BREAK SEMICOLON
    | BREAK expr:e SEMICOLON
    ;
exprlist ::= expr:e
    | exprlist:e1 COMMA expr:e2
    ;
expr ::= NOT expr:e
    | LPARENS expr:e RPARENS
    | expr:e1 AND expr:e2
    | expr:e1 OR expr:e2
    | expr:e1 IMPLICATION expr:e2
    | expr:e1 ADD expr:e2
    | expr:e1 MINUS expr:e2
    | expr:e1 TIMES expr:e2
    | expr:e1 DIVIDE expr:e2
    | expr:e1 POWER expr:e2
    | expr:e1 LESSTHAN expr:e2
    | expr:e1 LESSTHANEQUAL expr:e2
    | expr:e1 EQUAL expr:e2
    | expr:e1 NOTEQUAL expr:e2
    | expr:e1 CONCAT expr:e2
    | MINUS expr:e
    | NULL
    | TRUE
    | FALSE
    | IDENTIFIER:i LBRACKET slice RBRACKET
    | IDENTIFIER:i1 LBRACKET expr:e RBRACKET
    | IDENTIFIER:i
    | CHAR:c
    | FLOAT:f
    | RAT:r
    | INT:i
    | STRING:s
    | LBRACKET exprlist:e RBRACKET
    | LBRACKET RBRACKET
    | LBRACE RBRACE
    | expr:e1 IN expr:e2
    | QUESTION expr:e1 QUESTION IDENTIFIER:f LPARENS exprlist:e2 RPARENS
    | QUESTION expr:e1 QUESTION IDENTIFIER:f LPARENS RPARENS
    | IDENTIFIER:i1 DOT IDENTIFIER:i2
    | LBRACE dictlist:d RBRACE
    ;
slice ::= expr:e1 COLON expr:e2
    | COLON expr:e2
    | COLON
    | expr:e1 COLON
    ;
dictlist ::= expr:e1 COLON expr:e2
    | dictlist:d COMMA expr:e1 COLON expr:e2
    ;
decllist ::= decl:d 
    | decllist:d1 COMMA decl:d2
    ;
decl ::= IDENTIFIER:identifier COLON type:t 
    ;
type ::= CHAR_TYPE
    | INT_TYPE
    | RAT_TYPE
    | FLOAT_TYPE
    | SEQ_TYPE LESSTHAN type:t GREATERTHAN
    | DICT_TYPE LESSTHAN type:t1 COMMA type:t2 GREATERTHAN
    | BOOL_TYPE
    | TOP_TYPE
    | IDENTIFIER:identifier
    ;
