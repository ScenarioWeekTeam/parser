Ambiguities

Paragraph: §7
Problem: The format for negative mixed rationals is ambiguous. It is not clear from the given examples if a negative quarter is acceptable as a negative fraction '-1/4' or is it necessary to display it as a mixed fraction with 0 as the whole number '-0_1/4'.
Our Solution: We decided to accept these negative non-mixed fractions such as '-1/4'.

Paragraph: §7
Problem: It is not clear if a minus sign can precede the fraction. E.g. '-345_-6/5'.
Our Solution: In standard mathematical notation, the fraction and numbers' sign cannot be seperate without being regarded as seperate numbers placed together via addition - so our compiler rejects this syntax.

Paragraph: §10, 11
Problem: Considering paragraph §9, which specifically states that zero length lists are allowed - how does this interact with the limitation on indexes to be within the the range of its length (positive to negative)?
Our Solution: N/A - Considering CUP parsing alone cannot detect this failure of array indexing being out of bounds, this ambiguity is beyond our scope to resolve.

Paragraph: §11
Problem: It is not clear if both indices can be omitted for a sequence slice '[:]'.
Our Solution: As it is supported in most other languages, our compiler will accept this syntax.

Paragraph: §12
Problem: It is unclear what precedence the operators have relative to each-other.
Our solution: Due to the document citing C as a basis in multiple paragraphs (including §12 and §19), we have largely considered C style precedence to be appropriate to implement. '!' has highest precdence followed by '^', then '*' and '/' with equal precedence, followed by '+' and '-', then '<', '<=', '=' and '!=', and then finally the '::' with lowest precedence. In addition, like C, the precedence can be overridden by segregating parens.

Paragraph: §13
Problem: It is ambiguous whether an empty declaration_list when using 'tdef' is allowed.
Our Solution: Considering the functional language Haskell allows empty tuples, we think it would be a potential valid use case to accept empty type definitions as an equivalent.

Paragraph: §13
Problem: It is ambiguous if type definitions are accepted inside function bodies.
Our solution: We accept type definitions inside functions as you may want to have a type exposed only inside a specific scope.

Paragraph: §14
Problem: It is ambiguous if function definitions are accepted inside function bodies.
Our solution: We accept function definitions inside functions as you may want to approximate the anonymous functions of other languages within a limited scope.

Paragraph: §20
Problem: It is explicitly stated that main returns no value. However, many Unix and Unix-like operating systems accept return values from program execution for the purpose of piping, and other forms of program interaction. What is the appropriate choice?
Our solution: In order to prevent the language from being limited - and behave with the piping interface - we have elected to allow main to return a value.

Paragraph: §2, §13, §14
Problem: It is stated that the program is composed of declarations including main, variable assignment is not listed as a declaration
Our solution: To allow there to be global variables we will allow variable declaration including assignment, but we will not support variable assignment at a atime other than declaration outside a function as this would be ambiguous as to when it would execute.
